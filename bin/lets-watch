#!/bin/bash

# Ignore warnings for sourcing files from variable input
# We support user-defined config paths
# shellcheck disable=SC1090

# Variables ####################################################################

declare -r SCRIPT_NAME="${0##*/}"

declare -r LIB_DIR="${HOME}/.local/lib/lets-watch"
declare -r TMP_DIR="${XDG_RUNTIME_DIR}/lets-watch"

declare -r CONFIG_HOME="${XDG_CONFIG_HOME:-${HOME}/.config}"
declare -r CONFIG_DIR="${CONFIG_HOME%/}/lets-watch"
declare -r DEFAULT_CONFIG_FILE="${CONFIG_DIR}/config"

declare -r DEFAULT_MEDIA_PLAYER='mpv'
# Passed by nameref
# shellcheck disable=SC2034
declare -A DEFAULT_MEDIA_DIRS=(
  ['local-media']="$(xdg-user-dir VIDEOS)"
  ['playlist']="${CONFIG_DIR}/playlists"
)

# TFM ##########################################################################

usage() {
  cat <<EOF
  $SCRIPT_NAME - a simple script to enqueue media

  Usage:
    $SCRIPT_NAME [-c CONFIG_FILE] PLUGIN
    $SCRIPT_NAME [-h]

  Options:

  -d SCRIPT_DIR
    Enables specifying an alternate directory to be searched during the
    execution of the invoked finder script.
    Overrides MEDIA_DIR if running in media file mode and PLAYLIST_DIR if
    running in playlist mode.

  -l
    Runs the script in playlist mode. In this mode, the user selects a playlist
    from PLAYLIST_DIR, then subsequently selects the starting file for playback.
    I.e., if the user selects the third video in a playlist, then all entries in
    that playlist from the third onward, will be added to the current player's
    media queue.

  -p PLAYER
    Enables specifying the media player command. This command must:
    * be able to accept a newline-separated list of files (potentially
      consisting of both media files and playlists) as its final
      argument string
    * must not require any additional command-line options to run - if
      your command requires options, use a wrapper script which passes
      in the required options and arguments

    PLAYER can be a multi-word string (in order to support e.g. setting
    environment variables and command line options inline), but it must adhere
    to the above specification.

    Defaults to mpv.

  -h
    Displays this help message.

  Config Variables:

  MEDIA_PLAYER
    Sets the media player activated by the script. This player MUST be able to
    accept a path to a single .M3U-formatted playlist as input.

  MEDIA_DIRS
    An associative array containing the directory paths to be searched while
    running the script.

    Keys are plugin basenames; values are colon-separated lists of absolute
    directory paths. Default values for built-in plugins are set as follows:

    local-media: \$XDG_VIDEOS_DIR
    playlist: \$CONFIG_HOME/lets-watch/playlists, where \$CONFIG_HOME is equal
    to \$XDG_CONFIG_HOME if set, otherwise \$HOME/.config

EOF
}

# Functions ####################################################################

lw_source_plugin() {
  local -r plugin_name="$1"

  [[ -z "$plugin_name" ]] &&
    return 1

  local -r plugin="${LIB_DIR}/${plugin_name}"

  [[ -r "$plugin" ]] &&
    . "$plugin"
}

lw_gen_random_tag() {
  # Append a random tag to playlist names so that we don't overwrite a previously enqueued list
  LC_ALL=C tr -dc 'A-Za-z0-9' </dev/urandom | head -c 6
}

copy_map() {
  local -rn map_1="$1"
  local -rn map_2="$2"

  for key in "${!map_1[@]}"; do
    # We're populating an associative array passed by nameref
    # We don't want to use it anywhere else within this scope
    # shellcheck disable=SC2034
    map_2["$key"]=${map_1["$key"]}
  done
}

################################################################################

while getopts :c:h o; do
  case "$o" in
  c)
    CONFIG_FILE="$OPTARG"
    ;;
  h)
    usage
    exit 0
    ;;
  *)
    usage
    exit 1
    ;;
  esac
done

shift $((OPTIND - 1))

CONFIG_FILE="${CONFIG_FILE:-${DEFAULT_CONFIG_FILE}}"
. "$CONFIG_FILE"

if [[ "${#MEDIA_DIRS[@]}" -eq 0 ]]; then
  declare -A MEDIA_DIRS
  copy_map 'DEFAULT_MEDIA_DIRS' 'MEDIA_DIRS'
fi

MEDIA_PLAYER="${MEDIA_PLAYER:-${DEFAULT_MEDIA_PLAYER}}"

PLUGIN="$1"

if [[ -z "$PLUGIN" ]]; then
  echo "No plugin specified!"
  usage
  exit 1
fi

IFS=':' read -r -a LW_MEDIA_DIRS <<<"${MEDIA_DIRS["$PLUGIN"]}"

if [[ ${#LW_MEDIA_DIRS[@]} -eq 0 ]]; then
  echo "No media directory specified!"
  usage
  exit 1
fi

lw_source_plugin "$PLUGIN"

if ! declare -f lw_select_media >/dev/null; then
  echo "Plugin does not implement function lw_select_media!"
  exit 1
fi

declare -a MEDIA_SELECTION
if ! lw_select_media 'MEDIA_SELECTION' "${LW_MEDIA_DIRS[@]}"; then
  exit 1
fi

if [[ ${#MEDIA_SELECTION[@]} -eq 0 ]]; then
  exit 1
fi

mkdir -p "$TMP_DIR"

declare TMP_PLAYLIST
TMP_PLAYLIST="${TMP_DIR}/playlist-$(lw_gen_random_tag).m3u"

echo "${MEDIA_SELECTION[@]}" >"$TMP_PLAYLIST"

echo "Enqueued media:"
echo "--------------"
echo "$TMP_PLAYLIST"
echo "--------------"

${MEDIA_PLAYER} "$TMP_PLAYLIST" &
